import fs from "fs/promises";
import path from "path";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

export interface ProjectInitResult {
  success: boolean;
  message?: string;
  projectPath?: string;
  error?: string;
}

export async function initializeReactProject(): Promise<ProjectInitResult> {
  try {
    const projectName = "my-react-app";
    const projectPath = path.join(process.cwd(), "generated-projects", projectName);
    
    // Create the projects directory if it doesn't exist
    const projectsDir = path.join(process.cwd(), "generated-projects");
    await fs.mkdir(projectsDir, { recursive: true });
    
    // Check if project already exists
    try {
      await fs.access(projectPath);
      return {
        success: false,
        error: `Project '${projectName}' already exists. Please remove it first or choose a different name.`,
      };
    } catch {
      // Project doesn't exist, which is what we want
    }
    
    console.log(`Initializing React project at: ${projectPath}`);
    
    // Create React app using npx create-react-app
    const { stdout, stderr } = await execAsync(
      `npx create-react-app ${projectName} --template typescript`,
      { 
        cwd: projectsDir,
        timeout: 300000 // 5 minutes timeout
      }
    );
    
    console.log("React app creation stdout:", stdout);
    if (stderr) {
      console.log("React app creation stderr:", stderr);
    }
    
    // Verify the project was created successfully
    try {
      await fs.access(path.join(projectPath, "package.json"));
    } catch {
      throw new Error("Failed to create React project - package.json not found");
    }
    
    // Create a basic README for the generated project
    const readmeContent = `# Generated React Project

This React project was generated by DataFlow Designer.

## Getting Started

1. Navigate to the project directory:
   \`\`\`bash
   cd generated-projects/${projectName}
   \`\`\`

2. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

3. Start the development server:
   \`\`\`bash
   npm start
   \`\`\`

## Project Structure

- \`src/\` - Source code directory
- \`public/\` - Public assets
- \`package.json\` - Project dependencies and scripts

## Available Scripts

- \`npm start\` - Runs the app in development mode
- \`npm test\` - Launches the test runner
- \`npm run build\` - Builds the app for production
- \`npm run eject\` - Ejects from Create React App (one-way operation)

Generated on: ${new Date().toISOString()}
`;
    
    await fs.writeFile(path.join(projectPath, "README.md"), readmeContent);
    
    return {
      success: true,
      message: `React project '${projectName}' created successfully at ${projectPath}`,
      projectPath,
    };
    
  } catch (error) {
    console.error("Error initializing React project:", error);
    
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred while initializing project",
    };
  }
}

export async function createCustomReactProject(projectName: string): Promise<ProjectInitResult> {
  try {
    // Clean project name (remove special characters)
    const cleanProjectName = projectName.replace(/[^a-zA-Z0-9-_]/g, '-').toLowerCase();
    const projectPath = path.join(process.cwd(), "generated-projects", cleanProjectName);
    
    // Create the projects directory if it doesn't exist
    const projectsDir = path.join(process.cwd(), "generated-projects");
    await fs.mkdir(projectsDir, { recursive: true });
    
    // Check if project already exists
    try {
      await fs.access(projectPath);
      return {
        success: false,
        error: `Project '${cleanProjectName}' already exists. Please choose a different name.`,
      };
    } catch {
      // Project doesn't exist, which is what we want
    }
    
    console.log(`Creating custom React project at: ${projectPath}`);
    
    // Create React app using npx create-react-app
    const { stdout, stderr } = await execAsync(
      `npx create-react-app ${cleanProjectName} --template typescript`,
      { 
        cwd: projectsDir,
        timeout: 300000 // 5 minutes timeout
      }
    );
    
    console.log("React app creation stdout:", stdout);
    if (stderr) {
      console.log("React app creation stderr:", stderr);
    }
    
    return {
      success: true,
      message: `React project '${cleanProjectName}' created successfully`,
      projectPath,
    };
    
  } catch (error) {
    console.error("Error creating custom React project:", error);
    
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error occurred while creating project",
    };
  }
}